/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Application;

import Utilities.ConnectionProvider;
import Utilities.General;
import Utilities.UserInfo;
import Utilities.AppointmentList;
import Utilities.CustomHeaderRenderer;
import Utilities.CustomOptionPane;
import Utilities.PendingButtonEditor;
import Utilities.PendingButtonRenderer;
import java.awt.Dimension;
import java.awt.Font;
import java.util.ArrayList;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author HP
 */
public class AppointmentPending extends javax.swing.JFrame {

    /**
     * Creates new form AppointmentAppending
     */
    UserInfo user_info;
    Connection con;
    PreparedStatement ps;
    DefaultTableModel model;
    ArrayList<AppointmentList> pendingArrayList;
    private ImageIcon icon;
    public AppointmentPending() {
        initComponents();
    }
//constructor overloading
    public AppointmentPending(UserInfo user_info) {
        initComponents();
        this.user_info = user_info;
        //patient interface and admin interface sidebar logic
       General.setProfileInfo(user_info, this.greeting_name_label, this.admin_name_label);
       General.setUpSideBar(this.appointment_label, this.medicine_label, this.add_account_label, this.patient_label,this,user_info);
       if(user_info.getWorkPosition().equals("Patient")){
           showPatientPendingList();
       }else{
           showAdminPendingList();
       }
       
       General.setSizeSidePanel(side_bar_panel,200,700);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel35 = new javax.swing.JPanel();
        side_bar_panel = new javax.swing.JPanel();
        jPanel37 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        medicine_label = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        patient_label = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        appointment_label = new javax.swing.JLabel();
        admin_name_label = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        add_account_label = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel8 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        pending_list_table = new javax.swing.JTable();
        jLabel14 = new javax.swing.JLabel();
        search_field = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        greeting_name_label = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        side_bar_panel.setBackground(new java.awt.Color(64, 89, 173));

        jPanel37.setBackground(new java.awt.Color(64, 89, 173));

        jLabel22.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setText("TCC CARES");

        javax.swing.GroupLayout jPanel37Layout = new javax.swing.GroupLayout(jPanel37);
        jPanel37.setLayout(jPanel37Layout);
        jPanel37Layout.setHorizontalGroup(
            jPanel37Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel37Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jLabel22)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel37Layout.setVerticalGroup(
            jPanel37Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel37Layout.createSequentialGroup()
                .addContainerGap(34, Short.MAX_VALUE)
                .addComponent(jLabel22)
                .addGap(25, 25, 25))
        );

        medicine_label.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        medicine_label.setForeground(new java.awt.Color(255, 255, 255));
        medicine_label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/healthcare (1) (1).png"))); // NOI18N
        medicine_label.setText("Medicines");
        medicine_label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                medicine_labelMouseClicked(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/business-report (1).png"))); // NOI18N
        jLabel2.setText("Dashboard");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        patient_label.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        patient_label.setForeground(new java.awt.Color(255, 255, 255));
        patient_label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/patient (1).png"))); // NOI18N
        patient_label.setText("Patients");
        patient_label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patient_labelMouseClicked(evt);
            }
        });

        appointment_label.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        appointment_label.setForeground(new java.awt.Color(255, 255, 255));
        appointment_label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/reports.png"))); // NOI18N
        appointment_label.setText("Appointments");
        appointment_label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                appointment_labelMouseClicked(evt);
            }
        });

        admin_name_label.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        admin_name_label.setForeground(new java.awt.Color(255, 255, 255));
        admin_name_label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/administrator (1).png"))); // NOI18N
        admin_name_label.setText("Administrator");
        admin_name_label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                admin_name_labelMouseClicked(evt);
            }
        });

        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/notification (1).png"))); // NOI18N
        jLabel8.setText("Pending Appointments");

        add_account_label.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        add_account_label.setForeground(new java.awt.Color(255, 255, 255));
        add_account_label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/add-user.png"))); // NOI18N
        add_account_label.setText("Add Account");
        add_account_label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                add_account_labelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout side_bar_panelLayout = new javax.swing.GroupLayout(side_bar_panel);
        side_bar_panel.setLayout(side_bar_panelLayout);
        side_bar_panelLayout.setHorizontalGroup(
            side_bar_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel37, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(side_bar_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(side_bar_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(side_bar_panelLayout.createSequentialGroup()
                        .addGroup(side_bar_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(add_account_label))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4))
                    .addComponent(jLabel2)
                    .addComponent(patient_label)
                    .addComponent(medicine_label)
                    .addComponent(appointment_label)
                    .addComponent(admin_name_label)
                    .addGroup(side_bar_panelLayout.createSequentialGroup()
                        .addGap(172, 172, 172)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        side_bar_panelLayout.setVerticalGroup(
            side_bar_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(side_bar_panelLayout.createSequentialGroup()
                .addComponent(jPanel37, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(admin_name_label)
                .addGap(30, 30, 30)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(patient_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(medicine_label)
                .addGap(9, 9, 9)
                .addComponent(appointment_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(side_bar_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(side_bar_panelLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, side_bar_panelLayout.createSequentialGroup()
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)))
                .addComponent(add_account_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(0, 325, Short.MAX_VALUE))
        );

        jPanel8.setBackground(new java.awt.Color(180, 173, 234));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(64, 89, 173));
        jLabel6.setText("PENDING APPOINTMENTS");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel6)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        pending_list_table.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        pending_list_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient's Name", "Appointment Schedule", "Doctor / Nurse", "Reason", "Status", "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        pending_list_table.setGridColor(new java.awt.Color(255, 255, 255));
        pending_list_table.setSelectionBackground(new java.awt.Color(64, 89, 173));
        jScrollPane1.setViewportView(pending_list_table);
        if (pending_list_table.getColumnModel().getColumnCount() > 0) {
            pending_list_table.getColumnModel().getColumn(0).setResizable(false);
            pending_list_table.getColumnModel().getColumn(1).setResizable(false);
            pending_list_table.getColumnModel().getColumn(2).setResizable(false);
            pending_list_table.getColumnModel().getColumn(3).setResizable(false);
            pending_list_table.getColumnModel().getColumn(4).setResizable(false);
            pending_list_table.getColumnModel().getColumn(5).setResizable(false);
            pending_list_table.getColumnModel().getColumn(6).setResizable(false);
            pending_list_table.getColumnModel().getColumn(7).setResizable(false);
            pending_list_table.getColumnModel().getColumn(8).setResizable(false);
        }

        jLabel14.setBackground(new java.awt.Color(0, 0, 0));
        jLabel14.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(51, 51, 51));
        jLabel14.setText("SEARCH PATIENT");

        search_field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                search_fieldKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(search_field, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 926, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(search_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 575, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(66, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(64, 89, 173));

        greeting_name_label.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        greeting_name_label.setForeground(new java.awt.Color(255, 255, 255));
        greeting_name_label.setText("Hello, Admin!");

        jButton4.setBackground(new java.awt.Color(220, 20, 60));
        jButton4.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Logout");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(greeting_name_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton4)
                .addGap(16, 16, 16))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(greeting_name_label)
                    .addComponent(jButton4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel35Layout = new javax.swing.GroupLayout(jPanel35);
        jPanel35.setLayout(jPanel35Layout);
        jPanel35Layout.setHorizontalGroup(
            jPanel35Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel35Layout.createSequentialGroup()
                .addComponent(side_bar_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel35Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel35Layout.setVerticalGroup(
            jPanel35Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel35Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel35Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(side_bar_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel35Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel35, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel35, javax.swing.GroupLayout.PREFERRED_SIZE, 702, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
  
    //append the patient interface pending appointment
    public ArrayList<AppointmentList> getPatientPendingList() {
    String patient_name;
    pendingArrayList = new ArrayList<>();
    this.con = ConnectionProvider.connect();

    try {
        // Use a prepared statement to safely include the parameter in the query
        String query = "SELECT pending.reference_id, pending.patient_id, pending.appointment_date, pending.time, pending.clinic_position, pending.reason, pending.status, patient.firstname, patient.middlename, patient.lastname FROM pending JOIN patient ON pending.patient_id = patient.patient_id WHERE patient.patient_id = ?";
        PreparedStatement statement = this.con.prepareStatement(query);
        statement.setInt(1, user_info.getPatientId()); // Set the value of the parameter

        ResultSet rs = statement.executeQuery();

        AppointmentList pending;
        while (rs.next()) {
            patient_name = rs.getString("firstname") + " " + rs.getString("middlename") + " " + rs.getString("lastname");
            pending = new AppointmentList(rs.getInt("reference_id"), rs.getInt("patient_id"), patient_name, rs.getDate("appointment_date"), rs.getTime("time"), rs.getString("clinic_position"), rs.getString("reason"), rs.getBoolean("status"));
            pendingArrayList.add(pending);
        }
        return pendingArrayList;

    } catch (SQLException ex) {
        Logger.getLogger(AppointmentPending.class.getName()).log(Level.SEVERE, null, ex);
    }
    return null;
}
      //show the pending list return by pendingList method
    public void showPatientPendingList(){
         pendingArrayList = getPatientPendingList();
         model = (DefaultTableModel)this.pending_list_table.getModel();
         Object[] row = new Object[5];
                
         
         //set table font to times new roman
         General.setTableFont(this.pending_list_table);
         
         for(int i = 0; i < pendingArrayList.size(); i++){
             // Make the date as a readable string format
             String formattedDate = General.convertDateToReadable(pendingArrayList.get(i).getAppointmentDate().toString());
             // Convert the time in 12 hour format
             String formattedTime = General.convertTimeToReadable(pendingArrayList.get(i).getTime());
//            System.out.println(pendingArrayList.get(i).getTime());
             row[0] = "RID" +  pendingArrayList.get(i).getReferenceId() + " " + pendingArrayList.get(i).getPatientName();
            row[1] = formattedDate + " " + formattedTime;
            row[2] = pendingArrayList.get(i).getClinicPosition();
            row[3] = pendingArrayList.get(i).getReason();
            if(pendingArrayList.get(i).getStatus()){
                row[4] = "Approve";
            }else{
                row[4] = "Pending";
            }
            model.addRow(row);
        }
      this.pending_list_table.setRowHeight(50);
      this.pending_list_table.getColumnModel().getColumn(0).setPreferredWidth(200);
      this.pending_list_table.getColumnModel().getColumn(1).setPreferredWidth(300);
      this.pending_list_table.getColumnModel().getColumn(2).setPreferredWidth(150);
      this.pending_list_table.getColumnModel().getColumn(3).setPreferredWidth(400);
    }
    
    //append the admin pending appointment in jtable
    public ArrayList<AppointmentList> getAdminPendingList(){
        String patient_name;
        pendingArrayList = new ArrayList<>();
        this.con = ConnectionProvider.connect();
        
        Statement statement; 
        try {
            statement = this.con.createStatement();
            ResultSet rs = statement.executeQuery("SELECT pending.reference_id,pending.patient_id, pending.appointment_date, pending.time, pending.clinic_position, pending.reason, pending.status, patient.firstname, patient.middlename, patient.lastname FROM pending JOIN patient ON pending.patient_id = patient.patient_id");
           AppointmentList pending;
            while(rs.next()){
                patient_name = rs.getString("firstname") + " " + rs.getString("middlename") + " " + rs.getString("lastname");
                pending = new AppointmentList(rs.getInt("reference_id"), rs.getInt("patient_id"), patient_name, rs.getDate("appointment_date"), rs.getTime("time"), rs.getString("clinic_position"), rs.getString("reason"), rs.getBoolean("status"));
                pendingArrayList.add(pending);
            }
            return pendingArrayList;

        } catch (SQLException ex) {
            Logger.getLogger(AppointmentPending.class.getName()).log(Level.SEVERE, null, ex);
        }
          return null;
    }
    //show the pending list return by pendingList method
    public void showAdminPendingList(){
        String approve_button_text = "Approve";
        String cancel_button_text = "Cancel";
         pendingArrayList = getAdminPendingList();
         model = (DefaultTableModel)this.pending_list_table.getModel();
         Object[] row = new Object[9];
        
         model.setRowCount(0);
         
         // Create a custom cell renderer for the delete button column
         // Create a custom cell renderer for the button column
         this.pending_list_table.getColumnModel().getColumn(5).setCellRenderer(new PendingButtonRenderer(approve_button_text));
         this.pending_list_table.getColumnModel().getColumn(6).setCellRenderer(new PendingButtonRenderer(cancel_button_text));
         // Create a custom cell editor for the button column
         this.pending_list_table.getColumnModel().getColumn(5).setCellEditor(new PendingButtonEditor(this,this.pending_list_table,approve_button_text,new JCheckBox(),0, user_info));
         this.pending_list_table.getColumnModel().getColumn(6).setCellEditor(new PendingButtonEditor(this,this.pending_list_table,cancel_button_text,new JCheckBox(),1, user_info));         
        
         
         //set table font to times new roman
         General.setTableFont(this.pending_list_table);
         
         for(int i = 0; i < pendingArrayList.size(); i++){
             // Make the date as a readable string format
             String formattedDate = General.convertDateToReadable(pendingArrayList.get(i).getAppointmentDate().toString());
             // Convert the time in 12 hour format
             String formattedTime = General.convertTimeToReadable(pendingArrayList.get(i).getTime());
//            System.out.println(pendingArrayList.get(i).getTime());
             row[0] = "RID" +  pendingArrayList.get(i).getReferenceId() + " " + pendingArrayList.get(i).getPatientName();
            row[1] = formattedDate + " " + formattedTime;
            row[2] = pendingArrayList.get(i).getClinicPosition();
            row[3] = pendingArrayList.get(i).getReason();
            if(pendingArrayList.get(i).getStatus()){
                row[4] = "Approve";
            }else{
                row[4] = "Pending";
            }
            row[7] = pendingArrayList.get(i).getPatientId();
            row[8] = pendingArrayList.get(i).getReferenceId();
            model.addRow(row);
        }
      this.pending_list_table.setRowHeight(50);
      this.pending_list_table.getColumnModel().getColumn(0).setPreferredWidth(200);
      this.pending_list_table.getColumnModel().getColumn(1).setPreferredWidth(300);
      this.pending_list_table.getColumnModel().getColumn(2).setPreferredWidth(150);
      this.pending_list_table.getColumnModel().getColumn(3).setPreferredWidth(400);
     TableColumnModel columnModel = this.pending_list_table.getColumnModel();
     General.setColumnWidthZero(columnModel, 7);
     General.setColumnWidthZero(columnModel, 8);
    }
    private void medicine_labelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_medicine_labelMouseClicked
        new Medicine(user_info).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_medicine_labelMouseClicked

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        switch(user_info.getWorkPosition()){
                case "Doctor":
                    new MainDashboard(user_info).setVisible(true);
                    break;
                case "Nurse":
                    new MainDashboard(user_info).setVisible(true);
                    break;
                case "Staff":
                    new Dashboard(user_info).setVisible(true);
                    break;
                case "Patient":
                    //get the patient_id 
                    new PatientDashboard(user_info).setVisible(true);            
                    break;
            }
        this.dispose();
    }//GEN-LAST:event_jLabel2MouseClicked

    private void patient_labelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patient_labelMouseClicked
        if(user_info.getWorkPosition().equals("Patient")){
            ViewPatient view_patient = new ViewPatient(user_info);
            view_patient.setVisible(true);
            view_patient.fillInformationLabel(General.getPatientEntry(user_info.getPatientId()));
        }else{
            new Patient(user_info).setVisible(true); 
        }
        this.dispose();
    }//GEN-LAST:event_patient_labelMouseClicked

    private void appointment_labelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_appointment_labelMouseClicked
        new Appointment(user_info).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_appointment_labelMouseClicked

    private void add_account_labelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_add_account_labelMouseClicked
       new SignIn().setVisible(true);
    }//GEN-LAST:event_add_account_labelMouseClicked

    private void admin_name_labelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_admin_name_labelMouseClicked
        new AccountInfo(user_info).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_admin_name_labelMouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        icon = new ImageIcon("C:/Users/HP/Documents/NetBeansProjects/CMS/src/loginfailed.png");

        CustomOptionPane.showQuestionMessageDialog(
            this,
            "Are you sure you want to log out?",
            "Custom Dialog",
            JOptionPane.QUESTION_MESSAGE,
            icon);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void search_fieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search_fieldKeyReleased
                General.filterSearch(this.search_field.getText(), pending_list_table, 0);
    }//GEN-LAST:event_search_fieldKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppointmentPending.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppointmentPending.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppointmentPending.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppointmentPending.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AppointmentPending().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel add_account_label;
    private javax.swing.JLabel admin_name_label;
    private javax.swing.JLabel appointment_label;
    private javax.swing.JLabel greeting_name_label;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel37;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel medicine_label;
    private javax.swing.JLabel patient_label;
    private javax.swing.JTable pending_list_table;
    private javax.swing.JTextField search_field;
    private javax.swing.JPanel side_bar_panel;
    // End of variables declaration//GEN-END:variables
}
